// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package user

import (
	"context"

	"github.com/google/uuid"
)

const checkExistsByEmail = `-- name: CheckExistsByEmail :one
SELECT EXISTS(
    SELECT id, nickname, email, password, profile_img, created_at, updated_at FROM users
    WHERE email = ?
           ) AS isExists
`

func (q *Queries) CheckExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.queryRow(ctx, q.checkExistsByEmailStmt, checkExistsByEmail, email)
	var isexists bool
	err := row.Scan(&isexists)
	return isexists, err
}

const checkExistsByNickname = `-- name: CheckExistsByNickname :one
SELECT EXISTS(
   SELECT id, nickname, email, password, profile_img, created_at, updated_at FROM users
   WHERE nickname = ?
           ) AS isExists
`

func (q *Queries) CheckExistsByNickname(ctx context.Context, nickname string) (bool, error) {
	row := q.queryRow(ctx, q.checkExistsByNicknameStmt, checkExistsByNickname, nickname)
	var isexists bool
	err := row.Scan(&isexists)
	return isexists, err
}

const create = `-- name: Create :exec
INSERT INTO users (id, nickname, email, password, profile_img, created_at, updated_at) VALUES (?,?,?,?,?,?,?)
`

type CreateParams struct {
	ID         uuid.UUID
	Nickname   string
	Email      string
	Password   string
	ProfileImg string
	CreatedAt  int64
	UpdatedAt  int64
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.exec(ctx, q.createStmt, create,
		arg.ID,
		arg.Nickname,
		arg.Email,
		arg.Password,
		arg.ProfileImg,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createBadge = `-- name: CreateBadge :exec
INSERT INTO badge_users (users_id, badge_id, created_at) VALUES (?, ?, ?)
`

type CreateBadgeParams struct {
	UsersID   uuid.UUID
	BadgeID   int64
	CreatedAt int64
}

func (q *Queries) CreateBadge(ctx context.Context, arg CreateBadgeParams) error {
	_, err := q.exec(ctx, q.createBadgeStmt, createBadge, arg.UsersID, arg.BadgeID, arg.CreatedAt)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserByIdStmt, deleteUserById, id)
	return err
}

const getBadgeByUserId = `-- name: GetBadgeByUserId :many
SELECT bu.badge_id FROM badge_users bu
INNER JOIN badge b on bu.badge_id = b.id
WHERE users_id = ?
ORDER BY b.id
`

func (q *Queries) GetBadgeByUserId(ctx context.Context, usersID uuid.UUID) ([]int64, error) {
	rows, err := q.query(ctx, q.getBadgeByUserIdStmt, getBadgeByUserId, usersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var badge_id int64
		if err := rows.Scan(&badge_id); err != nil {
			return nil, err
		}
		items = append(items, badge_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByEmail = `-- name: GetByEmail :one
SELECT id, nickname, email, password, profile_img, created_at, updated_at from users
WHERE email = ?
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getByEmailStmt, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Email,
		&i.Password,
		&i.ProfileImg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getById = `-- name: GetById :one
SELECT id, nickname, email, password, profile_img, created_at, updated_at FROM users
WHERE id = ?
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getByIdStmt, getById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Email,
		&i.Password,
		&i.ProfileImg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLatestBadgeByUserId = `-- name: GetLatestBadgeByUserId :one
SELECT b.id, subject FROM badge_users bu
    INNER JOIN badge b on bu.badge_id = b.id
WHERE users_id = ?
ORDER BY created_at LIMIT 1
`

func (q *Queries) GetLatestBadgeByUserId(ctx context.Context, usersID uuid.UUID) (Badge, error) {
	row := q.queryRow(ctx, q.getLatestBadgeByUserIdStmt, getLatestBadgeByUserId, usersID)
	var i Badge
	err := row.Scan(&i.ID, &i.Subject)
	return i, err
}

const getNicknameById = `-- name: GetNicknameById :one
SELECT nickname from users
WHERE id = ?
`

func (q *Queries) GetNicknameById(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.queryRow(ctx, q.getNicknameByIdStmt, getNicknameById, id)
	var nickname string
	err := row.Scan(&nickname)
	return nickname, err
}

const updateProfileById = `-- name: UpdateProfileById :exec
UPDATE users
SET nickname = ?, profile_img = ?, updated_at = ?
WHERE id = ?
`

type UpdateProfileByIdParams struct {
	Nickname   string
	ProfileImg string
	UpdatedAt  int64
	ID         uuid.UUID
}

func (q *Queries) UpdateProfileById(ctx context.Context, arg UpdateProfileByIdParams) error {
	_, err := q.exec(ctx, q.updateProfileByIdStmt, updateProfileById,
		arg.Nickname,
		arg.ProfileImg,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
