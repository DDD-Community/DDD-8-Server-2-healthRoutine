// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package user

import (
	"context"

	"github.com/google/uuid"
)

const checkExistsByEmail = `-- name: CheckExistsByEmail :one
SELECT EXISTS(
    SELECT id, nickname, email, password, profile_img, created_at, updated_at FROM users
    WHERE email = ?
           ) AS isExists
`

func (q *Queries) CheckExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.queryRow(ctx, q.checkExistsByEmailStmt, checkExistsByEmail, email)
	var isexists bool
	err := row.Scan(&isexists)
	return isexists, err
}

const checkExistsByNickname = `-- name: CheckExistsByNickname :one
SELECT EXISTS(
   SELECT id, nickname, email, password, profile_img, created_at, updated_at FROM users
   WHERE nickname = ?
           ) AS isExists
`

func (q *Queries) CheckExistsByNickname(ctx context.Context, nickname string) (bool, error) {
	row := q.queryRow(ctx, q.checkExistsByNicknameStmt, checkExistsByNickname, nickname)
	var isexists bool
	err := row.Scan(&isexists)
	return isexists, err
}

const create = `-- name: Create :exec
INSERT INTO users (id, nickname, email, password, profile_img, created_at, updated_at) VALUES (?,?,?,?,?,?,?)
`

type CreateParams struct {
	ID         uuid.UUID
	Nickname   string
	Email      string
	Password   string
	ProfileImg string
	CreatedAt  int64
	UpdatedAt  int64
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.exec(ctx, q.createStmt, create,
		arg.ID,
		arg.Nickname,
		arg.Email,
		arg.Password,
		arg.ProfileImg,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getByEmail = `-- name: GetByEmail :one
SELECT id, nickname, email, password, profile_img, created_at, updated_at from users
WHERE email = ?
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getByEmailStmt, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Email,
		&i.Password,
		&i.ProfileImg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getById = `-- name: GetById :one
SELECT id, nickname, email, password, profile_img, created_at, updated_at FROM users
WHERE id = ?
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getByIdStmt, getById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Email,
		&i.Password,
		&i.ProfileImg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNicknameById = `-- name: GetNicknameById :one
SELECT nickname from users
WHERE id = ?
`

func (q *Queries) GetNicknameById(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.queryRow(ctx, q.getNicknameByIdStmt, getNicknameById, id)
	var nickname string
	err := row.Scan(&nickname)
	return nickname, err
}

const updateProfileById = `-- name: UpdateProfileById :exec
UPDATE users
SET nickname = ?, profile_img = ?, updated_at = ?
WHERE id = ?
`

type UpdateProfileByIdParams struct {
	Nickname   string
	ProfileImg string
	UpdatedAt  int64
	ID         uuid.UUID
}

func (q *Queries) UpdateProfileById(ctx context.Context, arg UpdateProfileByIdParams) error {
	_, err := q.exec(ctx, q.updateProfileByIdStmt, updateProfileById,
		arg.Nickname,
		arg.ProfileImg,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
