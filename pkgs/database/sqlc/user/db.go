// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package user

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkExistsByEmailStmt, err = db.PrepareContext(ctx, checkExistsByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query CheckExistsByEmail: %w", err)
	}
	if q.checkExistsByNicknameStmt, err = db.PrepareContext(ctx, checkExistsByNickname); err != nil {
		return nil, fmt.Errorf("error preparing query CheckExistsByNickname: %w", err)
	}
	if q.createStmt, err = db.PrepareContext(ctx, create); err != nil {
		return nil, fmt.Errorf("error preparing query Create: %w", err)
	}
	if q.createBadgeStmt, err = db.PrepareContext(ctx, createBadge); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBadge: %w", err)
	}
	if q.deleteUserByIdStmt, err = db.PrepareContext(ctx, deleteUserById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserById: %w", err)
	}
	if q.existsBadgeByUserIdStmt, err = db.PrepareContext(ctx, existsBadgeByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsBadgeByUserId: %w", err)
	}
	if q.getBadgeByUserIdStmt, err = db.PrepareContext(ctx, getBadgeByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetBadgeByUserId: %w", err)
	}
	if q.getByEmailStmt, err = db.PrepareContext(ctx, getByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetByEmail: %w", err)
	}
	if q.getByIdStmt, err = db.PrepareContext(ctx, getById); err != nil {
		return nil, fmt.Errorf("error preparing query GetById: %w", err)
	}
	if q.getLatestBadgeByUserIdStmt, err = db.PrepareContext(ctx, getLatestBadgeByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestBadgeByUserId: %w", err)
	}
	if q.getNicknameByIdStmt, err = db.PrepareContext(ctx, getNicknameById); err != nil {
		return nil, fmt.Errorf("error preparing query GetNicknameById: %w", err)
	}
	if q.updateProfileByIdStmt, err = db.PrepareContext(ctx, updateProfileById); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProfileById: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkExistsByEmailStmt != nil {
		if cerr := q.checkExistsByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkExistsByEmailStmt: %w", cerr)
		}
	}
	if q.checkExistsByNicknameStmt != nil {
		if cerr := q.checkExistsByNicknameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkExistsByNicknameStmt: %w", cerr)
		}
	}
	if q.createStmt != nil {
		if cerr := q.createStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStmt: %w", cerr)
		}
	}
	if q.createBadgeStmt != nil {
		if cerr := q.createBadgeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBadgeStmt: %w", cerr)
		}
	}
	if q.deleteUserByIdStmt != nil {
		if cerr := q.deleteUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByIdStmt: %w", cerr)
		}
	}
	if q.existsBadgeByUserIdStmt != nil {
		if cerr := q.existsBadgeByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsBadgeByUserIdStmt: %w", cerr)
		}
	}
	if q.getBadgeByUserIdStmt != nil {
		if cerr := q.getBadgeByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBadgeByUserIdStmt: %w", cerr)
		}
	}
	if q.getByEmailStmt != nil {
		if cerr := q.getByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getByEmailStmt: %w", cerr)
		}
	}
	if q.getByIdStmt != nil {
		if cerr := q.getByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getByIdStmt: %w", cerr)
		}
	}
	if q.getLatestBadgeByUserIdStmt != nil {
		if cerr := q.getLatestBadgeByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestBadgeByUserIdStmt: %w", cerr)
		}
	}
	if q.getNicknameByIdStmt != nil {
		if cerr := q.getNicknameByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNicknameByIdStmt: %w", cerr)
		}
	}
	if q.updateProfileByIdStmt != nil {
		if cerr := q.updateProfileByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProfileByIdStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	checkExistsByEmailStmt     *sql.Stmt
	checkExistsByNicknameStmt  *sql.Stmt
	createStmt                 *sql.Stmt
	createBadgeStmt            *sql.Stmt
	deleteUserByIdStmt         *sql.Stmt
	existsBadgeByUserIdStmt    *sql.Stmt
	getBadgeByUserIdStmt       *sql.Stmt
	getByEmailStmt             *sql.Stmt
	getByIdStmt                *sql.Stmt
	getLatestBadgeByUserIdStmt *sql.Stmt
	getNicknameByIdStmt        *sql.Stmt
	updateProfileByIdStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		checkExistsByEmailStmt:     q.checkExistsByEmailStmt,
		checkExistsByNicknameStmt:  q.checkExistsByNicknameStmt,
		createStmt:                 q.createStmt,
		createBadgeStmt:            q.createBadgeStmt,
		deleteUserByIdStmt:         q.deleteUserByIdStmt,
		existsBadgeByUserIdStmt:    q.existsBadgeByUserIdStmt,
		getBadgeByUserIdStmt:       q.getBadgeByUserIdStmt,
		getByEmailStmt:             q.getByEmailStmt,
		getByIdStmt:                q.getByIdStmt,
		getLatestBadgeByUserIdStmt: q.getLatestBadgeByUserIdStmt,
		getNicknameByIdStmt:        q.getNicknameByIdStmt,
		updateProfileByIdStmt:      q.updateProfileByIdStmt,
	}
}
